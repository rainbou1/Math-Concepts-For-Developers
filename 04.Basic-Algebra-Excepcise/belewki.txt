Proekt
1 или повече Jupiter Notebooks 
код
изследва връзка между математика и програмиране
Няколко основни типе проекти 

Текст, математика и код.
Описва математическа концепция

1.Алгоритъм и го имплементирате.
2.Математически обяснения
3.Приложения на нешо в нещо друго - приложения на математически анализ в медицината
Вероятности.

Абсолютно винаги репорт
arxiv.org - какви научни статии има.
Поне един notebook който описва
Интеактивна симулация
Подаваме снимка и той прави нещо с нея
Domain Specific Език
Библиотека за Retracing
Типичните проекти са по-сложни с две звезди
Да разпишем идеите
Идея - генетичен алгоритъм 
Predicting Stock Price
Randow Walks
Black Show
Генетичен алгоритъм майка с пет деца - снимки
Чернова
Сетих ли се да направя това
Алгоритми за подобие
Генетичен алгоритъм - симулира еволюция
Код се пише инкрементално - от нещо, което работи, повече, и се тества
Анализ на сигнали
Анализ на аудио - разпознаване от каква птица е аудиото
Приложения с фрактали
Невронни мрежи за обучения от видео.
Симулация на квантов компютър което е линейна алгебра.
Domain Specific език
Тествах го по този и този начин.
Това което правим да знаем какво е и в някои случаи какво може да се подобри
Convolution/feature extractions.

Python поддържа много парадигми
Spaghetti Code - никакво парче от кода не е самостоятелно
CompCert - компилатор на C, който е доказано че работи
функцията map приема друга функция като аргумент
може да се запази функция като променлива
!!! Една функция може да запазва друга функция като параметър и да връща друга функция като резултат
filter
композирани на функции
lazy evaluation
Функции които са чисти и зависят само от параметри
Една функция може да бъде дефинирана в друга функция
Библиотеки 
	- за итерациии - itertool
	- операции върху функции - functools
	- toolz
	
functional programming - за чисти функции
lambda calculus
awesome functional python - препоръчано репо
pandas.read_csv
Първо се прави filtering и после mapping.
Идеята на closure е функцията да е затворена.
Идея за проекти - на базата на статистика да се правят предсказвания на продажби.
Полиномиална интерполация
Добре е да не правим екстраполация
https://pastebin.com/yVTeWrBs
Интерполация - имаме точки, които са в обхвата на първоначалните данни - между максималната и минималната правим интерполация.
Екстраполация - търсим информация извън тези точки.


Test

Questions:
1.Как да се свържа.
2.Върху какво е теста? Коя е теоретичната част? 

От проекта:
За кода
x, y = zip(*points)
matplotlib.pyplot as plt

plt.scatter  
https://www.w3schools.com/python/matplotlib_scatter.asp
The scatter() function plots one dot for each observation

Начина да се плотва вектор е plt.quiver (стрела на английски)

За втората задача вектори и комплексни числа
връзка между умножение с комплексно число и завъртане.
Умножение с реално число променя големината, но не променя посоката на вектора - тоест скалиране или хомотетия на български
Умножение с имагинерно число оставя големината и променя посоката. Тоест операция въртене може да се опише с операция с имагинерни числа и трансформациите на фурие са пример
Умножението е асоциативна операция.

POLSE AND POUNDER - За всяка една задача има 2 подхода - рекурсивен и итеративен.
itertools aggregate може да се ползва

Всяка итерация може да бъде изпълнена рекурсивно и всяка рекурсия итеративно.
Генератори в питон
ползване на yield
even - четни числа в термини на nat
Един генератор може да използва в себе си друг генератор.
А начините да получим стойности от някой генератор е със функцията next()
Да се напишат факториел и фибоначи в термините на генератор.
В математиката може една функция да вика сама себе си.
def factorial_gen(n):
    """Generator to calculate factorial"""
    result = 1
    for i in range(1, n + 1):
        result *= i
        yield result

# Test the factorial generator
n = 5
factorial = list(factorial_gen(n))[-1]  # Get the last element from the generator
print(f"The factorial of {n} is {factorial}")

Рекурентно зададена редица - задачата на мандерброт
итеративен процес
да получим графика подобна
fractal dimension

За 4-та задача
ASCII - всеки символ заема 1 байт
Начина по който кодираме битове се нарича encoding. Имаме broken encoding - това което кодираме, не е това дето си искаме
Целта е да можем да дефинираме как ще го разберем после

Какво е list comprehension:
https://www.w3schools.com/python/python_lists_comprehension.asp
List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []

for x in fruits:
  if "a" in x:
    newlist.append(x)

print(newlist)

Генераторите работят с for
След yield функцията запомня докъде е стигнала
enumerate връща индекса на елемента и самия елемент
Манделброт 		
def sequence(c):
	z = 0
	while True:
		yield z
		z = z ** 2 + c
Манделброт - дефиниция вика сама себе си.
Задачата е да разберете какво точно представляват тези неща.

Задача 5 - Криптирането не е кодиране на информация.
Имаме plaintext
И можем да му направим encrypt(plaintext)
към този plaintext трябва да добавите ключ
Тоест става encrypt(plaintext, key)
В последствие може да направим decrypt(ciphertext, key)
При кодирането няма ключ, при криптирането има ключ
Целта на криптирането е да не може да отключи това което вие сте заключили
Когато ключа, който е използван и при кодиране и при декодиране е един и същ, говорим за симетрично криптиране.
Иначе говорим за асиметрично криптиране (ключ заключен със жълтия може да бъде декодиран само с червения)
Тук целта е да скрием информация
Умножение и разлагане

Въпроси:
1. Това TODO на първа задача задължително ли е?
2. Какво да се хвърли, ако подадения параметър не е валиден (< 0 ) - това за факториела
3. Някой намери ли как да ползва itertools aggregate, които Данчо спомена? Аз питах ChatGPT и той ми даде:

import itertools


def factorial(n):
    return itertools.accumulate(range(1, n+1), lambda x, y: x * y)[-1]

# Test the factorial function
n = 5
print(f"The factorial of {n} is {factorial(n)}")

4. Това да се напише even() като се използва nat() - не разбрах next() в even ли трябва да се използва? Щото аз го направих много лесно без next?
5. На factoriаl(n) - може да се интерпретира да се изчисли факториела на числото n, a не на всички
